[build-system]
requires = ["setuptools>=65.4.1", "setuptools_scm[toml]>=7"]
build-backend = "setuptools.build_meta"


[project]
name = "iqm-cortex-cli"
dynamic = ["version"]
description = "CLI for managing user authentication when using IQM quantum computers"
authors = [{name = "IQM Finland Oy", email = "developers@meetiqm.com"}]
readme = "README.rst"
license = {file = "LICENSE.rst"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Physics",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License"
]
requires-python = ">=3.9, <3.12"
dependencies = [
    "click >= 8.1.6, < 9",
    "jsonschema >= 4.6.0",
    "psutil >= 5.9.2",
    "pydantic >= 2.4.2, < 3.0",
    "python-daemon >= 2.3.0",
    "requests >= 2.26.0"
]

[project.urls]
homepage = "https://github.com/iqm-finland/cortex-cli"
documentation = "https://iqm-finland.github.io/cortex-cli"
repository = "https://github.com/iqm-finland/cortex-cli.git"
changelog = "https://github.com/iqm-finland/cortex-cli/blob/main/CHANGELOG.rst"

[project.optional-dependencies]
# Add here additional requirements for extra features, to install with:
# `pip install iqm-cortex-cli[testing,docs,dev]`
dev = [
    "tox == 4.11.4"
]
testing = [
    "black == 23.12.0",
    "isort == 5.13.2",
    "mypy == 1.7.1",
    "pytest == 7.4.3",
    "pytest-cov == 4.1.0",
    "pytest-pylint == 0.21.0",
    "mockito == 1.4.0",
    "types-requests == 2.28.9"
]
docs = [
    "sphinx == 6.2.1",
    "sphinx-book-theme == 1.0.1",
    "sphinx-multiversion-contrib == 0.3.2"
]
cicd = [
    "twine == 4.0.2"
]

[project.scripts]
cortex = "iqm.cortex_cli.cortex_cli:cortex_cli"


[tool.setuptools.packages.find]
where = ["src"]


[tool.setuptools_scm]
version_scheme = "no-guess-dev"


[tool.pytest.ini_options]
norecursedirs = [
    ".github",
    ".mypy_cache",
    ".tox",
    "build",
    "docs",
    "venv"
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning:xarray",
    "ignore::DeprecationWarning:distutils",
    "ignore::FutureWarning:numpy"
]


[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ["py311"]


[tool.coverage.run]
branch = true
source = ["cortex_cli"]

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    'if self\.debug',

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
]


[tool.isort]
# make isort and black compatible
profile = "black"
line_length = 120
balanced_wrapping = true
force_sort_within_sections = true
reverse_relative = true
group_by_package = true
known_first_party = ["iqm"]


[tool.mypy]
namespace_packages = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "click",
    "daemon",
    "mockito",
    "psutil"
]
ignore_missing_imports = true


[tool.pylint.main]
disable = [
    "abstract-method",
    "duplicate-code",
    "fixme",
    "invalid-name",
    "protected-access",
    "too-few-public-methods",
]
extension-pkg-whitelist = ["pydantic"]

[tool.pylint.format]
max-line-length = 120

[tool.pylint.similarities]
ignore-imports = true

[tool.pylint.string]
check-quote-consistency = true
